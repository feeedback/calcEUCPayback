const fnOutputsMap={busCostsMonthly:({tripsToWorkPerMonth:tripsToWorkPerMonth,tripsToStorePerMonth:tripsToStorePerMonth,busPrice:busPrice})=>2*(tripsToWorkPerMonth+tripsToStorePerMonth)*busPrice,mileagePerMonth:({tripsToWorkPerMonth:tripsToWorkPerMonth,distanceToWork:distanceToWork,tripsToStorePerMonth:tripsToStorePerMonth,distanceToStore:distanceToStore})=>2*(tripsToWorkPerMonth*distanceToWork+tripsToStorePerMonth*distanceToStore),EUCCostsMonthly:({mileagePerMonth:mileagePerMonth,priceOfElectricityDay:priceOfElectricityDay,priceOfElectricityNight:priceOfElectricityNight,shareOfDaytimeFromAll:shareOfDaytimeFromAll,batteryCapacityEUC:batteryCapacityEUC,cruisingRangeEUC:cruisingRangeEUC})=>(mileagePerMonth*(batteryCapacityEUC/cruisingRangeEUC/1e3)*(priceOfElectricityDay*shareOfDaytimeFromAll+priceOfElectricityNight*(1-shareOfDaytimeFromAll))).toFixed(1),savingsOnTripsPerMonth:({busCostsMonthly:busCostsMonthly,EUCCostsMonthly:EUCCostsMonthly})=>(busCostsMonthly-EUCCostsMonthly).toFixed(0),busCostsPerYear:({busCostsMonthly:busCostsMonthly})=>12*busCostsMonthly,EUCCostsPerYear:({EUCCostsMonthly:EUCCostsMonthly,busCostsMonthly:busCostsMonthly,monthsOfTheYearAreSuitableForEUC:monthsOfTheYearAreSuitableForEUC,maintenanceEUCCostPerYear:maintenanceEUCCostPerYear})=>(EUCCostsMonthly*monthsOfTheYearAreSuitableForEUC+busCostsMonthly*(12-monthsOfTheYearAreSuitableForEUC)+maintenanceEUCCostPerYear).toFixed(0),savingsOnTripsPerYear:({busCostsPerYear:busCostsPerYear,EUCCostsPerYear:EUCCostsPerYear})=>(busCostsPerYear-EUCCostsPerYear).toFixed(0),paybackEUC:({purchasePriceEUC:purchasePriceEUC,savingsOnTripsPerYear:savingsOnTripsPerYear})=>(1e3*purchasePriceEUC/savingsOnTripsPerYear).toFixed(1)},calculateAndSetOutputValue=input=>{const formEls=input.form.elements;Object.keys(fnOutputsMap).forEach(output=>formEls[output].value=fnOutputsMap[output](Object.fromEntries(Object.values(formEls).map(inputEl=>[inputEl.name,Number(inputEl.value)]))))},calculateInputHandler=event=>{const inputRange=event.target;calculateAndSetOutputValue(inputRange)},calculateInputInit=()=>{const inputRange=document.querySelector('input[type="range"]');calculateAndSetOutputValue(inputRange)};calculateInputInit(),document.querySelector('form[name="calc"]').addEventListener("input",calculateInputHandler);