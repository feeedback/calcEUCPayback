!(function (t, e) {
  typeof define === 'function' && define.amd
    ? define(e)
    : typeof module === 'object' && module.exports
    ? (module.exports = e())
    : (t.Colcade = e());
})(window, () => {
  function t(t, e) {
    if ((t = s(t)) && t.colcadeGUID) {
      const i = a[t.colcadeGUID];
      return i.option(e), i;
    }
    (this.element = t), (this.options = {}), this.option(e), this.create();
  }
  function e(e) {
    const i = {};
    e
      .getAttribute('data-colcade')
      .split(',')
      .forEach((t) => {
        const e = t.split(':');
        const n = e[0].trim();
        const o = e[1].trim();
        i[n] = o;
      }),
      new t(e, i);
  }
  function i(t, e) {
    for (const i in e) t[i] = e[i];
    return t;
  }
  function n(t) {
    let e = [];
    if (Array.isArray(t)) e = t;
    else if (t && typeof t.length === 'number') for (let i = 0; i < t.length; i++) e.push(t[i]);
    else e.push(t);
    return e;
  }
  function o(t, e) {
    return n((e = e || document).querySelectorAll(t));
  }
  function s(t) {
    return typeof t === 'string' && (t = document.querySelector(t)), t;
  }
  const u = t.prototype;
  u.option = function (t) {
    this.options = i(this.options, t);
  };
  let r = 0;
  var a = {};
  return (
    (u.create = function () {
      this.errorCheck();
      const t = (this.guid = ++r);
      (this.element.colcadeGUID = t),
        (a[t] = this),
        this.reload(),
        (this._windowResizeHandler = this.onWindowResize.bind(this)),
        (this._loadHandler = this.onLoad.bind(this)),
        window.addEventListener('resize', this._windowResizeHandler),
        this.element.addEventListener('load', this._loadHandler, !0);
    }),
    (u.errorCheck = function () {
      const t = [];
      if (
        (this.element || t.push(`Bad element: ${this.element}`),
        this.options.columns || t.push(`columns option required: ${this.options.columns}`),
        this.options.items || t.push(`items option required: ${this.options.items}`),
        t.length)
      )
        throw new Error(`[Colcade error] ${t.join('. ')}`);
    }),
    (u.reload = function () {
      this.updateColumns(), this.updateItems(), this.layout();
    }),
    (u.updateColumns = function () {
      this.columns = o(this.options.columns, this.element);
    }),
    (u.updateItems = function () {
      this.items = o(this.options.items, this.element);
    }),
    (u.getActiveColumns = function () {
      return this.columns.filter((t) => getComputedStyle(t).display != 'none');
    }),
    (u.layout = function () {
      (this.activeColumns = this.getActiveColumns()), this._layout();
    }),
    (u._layout = function () {
      (this.columnHeights = this.activeColumns.map(() => 0)), this.layoutItems(this.items);
    }),
    (u.layoutItems = function (t) {
      t.forEach(this.layoutItem, this);
    }),
    (u.layoutItem = function (t) {
      const e = Math.min.apply(Math, this.columnHeights);
      const i = this.columnHeights.indexOf(e);
      this.activeColumns[i].appendChild(t), (this.columnHeights[i] += t.offsetHeight || 1);
    }),
    (u.append = function (t) {
      const e = this.getQueryItems(t);
      (this.items = this.items.concat(e)), this.layoutItems(e);
    }),
    (u.prepend = function (t) {
      const e = this.getQueryItems(t);
      (this.items = e.concat(this.items)), this._layout();
    }),
    (u.getQueryItems = function (t) {
      t = n(t);
      const e = document.createDocumentFragment();
      return (
        t.forEach((t) => {
          e.appendChild(t);
        }),
        o(this.options.items, e)
      );
    }),
    (u.measureColumnHeight = function (t) {
      const e = this.element.getBoundingClientRect();
      this.activeColumns.forEach(function (i, n) {
        if (!t || i.contains(t)) {
          const o = i.lastElementChild.getBoundingClientRect();
          this.columnHeights[n] = o.bottom - e.top;
        }
      }, this);
    }),
    (u.onWindowResize = function () {
      clearTimeout(this.resizeTimeout),
        (this.resizeTimeout = setTimeout(() => {
          this.onDebouncedResize();
        }, 100));
    }),
    (u.onDebouncedResize = function () {
      const t = this.getActiveColumns();
      const e = t.length == this.activeColumns.length;
      let i = !0;
      this.activeColumns.forEach((e, n) => {
        i = i && e == t[n];
      }),
        (e && i) || ((this.activeColumns = t), this._layout());
    }),
    (u.onLoad = function (t) {
      this.measureColumnHeight(t.target);
    }),
    (u.destroy = function () {
      this.items.forEach(function (t) {
        this.element.appendChild(t);
      }, this),
        window.removeEventListener('resize', this._windowResizeHandler),
        this.element.removeEventListener('load', this._loadHandler, !0),
        delete this.element.colcadeGUID,
        delete a[this.guid];
    }),
    (function (t) {
      document.readyState != 'complete' ? document.addEventListener('DOMContentLoaded', t) : t();
    })(() => {
      o('[data-colcade]').forEach(e);
    }),
    (t.data = function (t) {
      const e = (t = s(t)) && t.colcadeGUID;
      return e && a[e];
    }),
    (t.makeJQueryPlugin = function (e) {
      function i(t, i, n) {
        let o;
        return (
          t.each((t, s) => {
            const u = e.data(s, 'colcade');
            if (u) {
              const r = u[i].apply(u, n);
              o = void 0 === o ? r : o;
            }
          }),
          void 0 !== o ? o : t
        );
      }
      function n(i, n) {
        i.each((i, o) => {
          let s = e.data(o, 'colcade');
          s ? (s.option(n), s.layout()) : ((s = new t(o, n)), e.data(o, 'colcade', s));
        });
      }
      (e = e || window.jQuery) &&
        (e.fn.colcade = function (t) {
          return typeof t === 'string'
            ? i(this, t, Array.prototype.slice.call(arguments, 1))
            : (n(this, t), this);
        });
    }),
    t.makeJQueryPlugin(),
    t
  );
});
